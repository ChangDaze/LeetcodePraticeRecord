using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root = new TreeNode(3, new TreeNode(9), new TreeNode(20, new TreeNode(15), new TreeNode(7)));
            Solution solution = new Solution();
            var result = solution.AverageOfLevels(root);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        public class Solution
        {
            Dictionary<int, double[]> record = new Dictionary<int, double[]>();
            //因為會有整數相除和相加問題所以用double，但感覺用dictionary有點大費周章(每次都要判斷)，不知道能不能提前算好level布置好array的長度
            public IList<double> AverageOfLevels(TreeNode root)
            {
                if (root == null)
                    return null;
                Recurive(root,0);
                List<double> result = new List<double>();
                foreach(int key in record.Keys)
                {
                    result.Add(record[key][0] / record[key][1]);
                }
                return result;
            }

            public void Recurive(TreeNode node,int level)
            {
                if(node == null) return;
                if(!record.Keys.Contains(level))                
                    record[level] = new double[] {node.val,1};
                else
                {
                    record[level][0] += node.val;
                    record[level][1] += 1;
                }
                Recurive(node.left, level+1);
                Recurive(node.right, level+1);
                return;

            }
        }
    }
}
