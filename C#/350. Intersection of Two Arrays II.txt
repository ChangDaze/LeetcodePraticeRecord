using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            Solution solution = new Solution();
            var nums1 = new int[] { 1, 2, 3, 4 };
            var nums2 = new int[] { 1, 2, 3, 4 };
            var result = solution.Intersect(nums1, nums2);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        //public class Solution
        //{
        //    public int[] Intersect(int[] nums1, int[] nums2)
        //    {
        //        List<int> result = new List<int>();
        //        Array.Sort(nums1);
        //        Array.Sort(nums2);
        //        int i = 0;//two pointer
        //        int j = 0;

        //        while (i < nums1.Length && j < nums2.Length)
        //        {
        //            if (nums1[i] == nums2[j])
        //            {
        //                result.Add(nums1[i]);
        //                i++;
        //                j++;
        //            }
        //            else if (nums1[i] < nums2[j])
        //            {
        //                i++;
        //            }
        //            else
        //            {
        //                j++;
        //            }
        //        }


        //        return result.ToArray();
        //    }
        //}
        public class Solution
        {
            public int[] Intersect(int[] nums1, int[] nums2)
            {
                List<int> result = new List<int>();
                Dictionary<int,int> record = new Dictionary<int,int>();
                foreach(int i in nums1)
                {
                    if(record.ContainsKey(i)) record[i]++;
                    else record[i] = 1;
                }

                foreach (int i in nums2)
                {
                    if (record.ContainsKey(i))
                    {
                        if (record[i] > 0)
                        {
                            record[i]--;
                            result.Add(i);
                        }                        
                    }
                }

                return result.ToArray();
            }
            //上面是從349題用一樣的方法用sort不過不用hashset改用list記也能通，速度也蠻快
            //這是沒用sort直接用dic硬幹的方法，速度還蠻快...
            //兩題只差在返回包不包括重複值而已
            //其他
            //這方法跟我不用sort方法一樣，速度還行(不過細節感覺他的也能參考，重構上可能比較流暢)，話說這樣numAndCount1.ContainsKey(num) && numAndCount1[num] > 0，沒key時原來不會爆掉?可能null吧
            //https://leetcode.com/problems/intersection-of-two-arrays-ii/solutions/82279/c-solution-dictionary/
            //這就對應我sort和沒sort的方法
            //https://leetcode.com/problems/intersection-of-two-arrays-ii/solutions/605925/c-solution-dictionary-two-pointer/
            //這就是沒sort的方法
            //https://leetcode.com/problems/intersection-of-two-arrays-ii/solutions/211100/c-solution/
            //感覺這種題目大家解法都相同..
        }

    }
}
