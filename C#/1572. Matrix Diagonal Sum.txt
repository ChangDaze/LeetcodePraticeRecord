using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            Solution solution = new Solution();
            var nums = new int[][] { new int[] {1,2,3 },
                                        new int[] {4,5,6 },
                                        new int[] { 7,8,9}};
            var result = solution.DiagonalSum(nums);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        public class Solution
        {
            public int DiagonalSum(int[][] mat)
            {
                int sum = 0;
                for(int i = 0;i<mat.Length; i++)
                {
                    sum += mat[i][i] + mat[i][mat.Length-1-i];
                }
                if (mat.Length % 2 == 1)
                    sum = sum - mat[mat.Length / 2 ][mat.Length / 2 ];//因為index要-1，因為int/2所以要+1，所以不加不減
                return sum;
            }
        }
        //這是用LINQ的oneliner，思路非常清晰就幾個點
        //1.我的sum的加法，不過row是隨row而下我一開始用[i]還沒想到這特性，不過用法其實達成了
        //2.找overlap的方式，只要col有重疊就是，很猛，不像我還在考慮奇數，速度還行
        //https://leetcode.com/problems/matrix-diagonal-sum/solutions/2840400/c-1-liner-linq/
        //跟我寫的相同，不過他稍微乾淨一點(不是處理，是code排列)，速度不錯
        //https://leetcode.com/problems/matrix-diagonal-sum/solutions/855445/c-o-n-solution/
        //跟我寫的相同，速度還行
        //https://leetcode.com/problems/matrix-diagonal-sum/solutions/2374257/c-solution/
        //這樣看來第一人的第二點最值得學
    }
}
