using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root = new TreeNode(3, new TreeNode(4, new TreeNode(1), new TreeNode(2)), new TreeNode(5));
            var subRoot = new TreeNode(4, new TreeNode(1), new TreeNode(2));
            Solution solution = new Solution();
            var result = solution.IsSubtree(root, subRoot);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }


        public class Solution
        {
            TreeNode target;
            bool stopRecurive = false;
            bool stopCheck = false;
            bool check = false;
            public bool IsSubtree(TreeNode root, TreeNode subRoot)
            {
                target = subRoot;
                Recurive(root);
                if (stopRecurive) return true;
                return false;
            }

            public void Recurive(TreeNode node)
            {
                if (node == null || stopRecurive) return;
                if (node.val == target.val)//基本上就是preorder暴力解，抓到就從頭比比看，不過應該有不用遞迴的解法，這樣雙重遞迴感覺有點傷，速度也不快
                {
                    Check(node, target);
                    if (stopCheck == false)
                    {
                        stopRecurive = true;
                        return;
                    }
                    stopCheck = false;
                }
                Recurive(node.left);
                Recurive(node.right);
                return;
            }

            public void Check(TreeNode node1, TreeNode node2)
            {
                if (node1 == null || node2 == null || stopCheck)
                {
                    if (node1 != node2)
                        stopCheck = true;
                    return;
                }
                if (node1.val != node2.val)
                {
                    stopCheck = true;
                    return;
                }
                Check(node1.left, node2.left);
                Check(node1.right, node2.right);
                return;
            }
        }


    }
}
