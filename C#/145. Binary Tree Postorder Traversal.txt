using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {            
            Solution solution = new Solution();                       

            TreeNode root1 = new TreeNode(3, null, new TreeNode(2, new TreeNode(1)));
            IList<int> list = solution.PostorderTraversal(root1);

            for(int i = 0; i < list.Count; i++)
            {
                Console.WriteLine(list[i].ToString());
            }

            Console.ReadKey();

        }

        
          
        public class TreeNode {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        //public class Solution
        //{
        //    public IList<int> PostorderTraversal(TreeNode root)
        //    {
        //        if(root == null)
        //        {
        //            return new List<int>();
        //        }

        //        List<int> result = new List<int>();


        //        return PreorderRecursive(result,root);
        //    }
        //    public IList<int> PreorderRecursive(List<int> _result, TreeNode root)
        //    {
        //        //like the NTU OpenCourse Introduction to Computers lecture 16 do
        //        //postorder left -> right -> root
        //        if (root.left != null)
        //        {
        //            PreorderRecursive(_result,root.left);
        //        }                

        //        if (root.right != null)
        //        {
        //            PreorderRecursive(_result, root.right);
        //        }

        //        _result.Add(root.val);


        //        return _result;
        //    }
        //}
        //It look simple but，i don't know, it is slow
        //other
        //這個人用了preorder的方法但座有順序調換，然後最後一次reverse順序來達成postorder，用stack好像都至少能達到平均速度，以後實作可以考慮
        //https://leetcode.com/problems/binary-tree-postorder-traversal/discuss/290375/C-stack
        //這個recursive方法原理跟我一樣，但他判斷null的方法比我簡潔多了，因此可能也較快
        //https://leetcode.com/problems/binary-tree-postorder-traversal/discuss/1150517/C-solutions-(Iterative-and-Recursive)


        public class Solution
        {
            public IList<int> PostorderTraversal(TreeNode root)
            {
                Stack<TreeNode> stack = new Stack<TreeNode>();
                IList<int> result = new List<int>();
                for (TreeNode lastNode = null, peek; root != null || stack.Count != 0;)
                    if (root != null)
                    {
                        stack.Push(root);
                        root = root.left;
                    }
                    else if ((peek = stack.Peek()).right != null && peek.right != lastNode)//沒處理到的右邊會透過peek.right != lastNode來進入右邊，又邊都完了才會add root
                        root = peek.right;
                    else
                    {
                        result.Add(peek.val);
                        lastNode = stack.Pop();
                    }
                return result;
            }
        }
        //這個比較特別他是把順序都記好再一個個pop出來，peek是pop的不丟掉element版，令人印象深刻的是他的for其實沒有放入第三的條件ex:i++
        //https://leetcode.com/problems/binary-tree-postorder-traversal/discuss/45801/A-C-Classic-solution

    }
}
