using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root = new TreeNode(4, new TreeNode(2, new TreeNode(1), new TreeNode(3)), new TreeNode(7, new TreeNode(6), new TreeNode(9)));
            Solution solution = new Solution();
            var result = solution.InvertTree(root);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
            //原本如果可以用Clone就不用這樣判斷直接Recursive(o.left, r.right)之類的做兩次就好+判斷o是不是null
            //不過MemberwiseClone好像是protected的方法，所以不能直接Object.MemberwiseClone的讓大家在外部使用，只能另外實作成public
            //public object Clone()
            //{
            //    return this.MemberwiseClone();//複製到另一份記憶體，不過這也只到記憶體的淺複製，單層(沒參考很多其他東西時)用比較好
            //}
        }

        public class Solution
        {
            public TreeNode result;
            public TreeNode InvertTree(TreeNode root)
            {
                if (root == null)//防止rooot null
                    return null;
                result = new TreeNode(0);
                Recursive(root, result);
                return result;
            }

            public void Recursive(TreeNode o,TreeNode r)
            {
                r.val = o.val;
                if (o.left!=null)//現在就是一個節點一個節點慢慢倒置複製
                {
                    r.right = new TreeNode(0);//方向和source要相反
                    Recursive(o.left, r.right);
                }
                if (o.right != null)
                {
                    r.left = new TreeNode(0);
                    Recursive(o.right, r.left);
                }
                return;
            }
        }
    }
}
