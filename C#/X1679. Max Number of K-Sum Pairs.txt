using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] height = new int[] { 3, 1, 3, 4, 3 };
            int k = 6;
            Solution solution = new Solution();
            var result = solution.MaxOperations(height, k);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        //public class Solution
        //{
        //    public int MaxOperations(int[] nums, int k)
        //    {
        //        Array.Sort(nums);

        //        int left = 0;
        //        int right = nums.Length - 1;
        //        int result = 0;

        //        while (left < right)
        //        {
        //            if (nums[right] > k)
        //            {
        //                right--;
        //                continue;
        //            }

        //            if (nums[left] + nums[right] == k)
        //            {
        //                left++;
        //                right--;
        //                result++;
        //                continue;
        //            }

        //            if (nums[right] > (k - nums[left]))
        //            {
        //                right--;
        //                continue;
        //            }

        //            if (nums[left] < (k - nums[right]))
        //            {
        //                left++;
        //                continue;
        //            }
        //        }

        //        return result;
        //    }
        //}

        //2023.0723 hashtable
        public class Solution
        {
            public int MaxOperations(int[] nums, int k)
            {
                int result = 0;

                Dictionary<int, int> record = new Dictionary<int, int>();

                foreach(int num in nums)
                {
                    if(record.ContainsKey(k-num) && (record[k - num] > 0))
                    {
                        result++;
                        record[k-num]--;
                    }else if (!record.ContainsKey(num))
                    {
                        record[num]=1;
                    }
                    else
                    {
                        record[num]++;
                    }

                }

                return result;
            }
        }
        //基本上抄這位的，不過也說明了hashtable的不同用法，就是可以類似DP那樣讓後面檢查的範圍每次都能包含前面，而不用無腦回頭
    }
}
