using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Security.Policy;


namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] nums = new int[] { 1, 3, 2, 1, 3, 2, 2 };
            Solution solution = new Solution();
            var result = solution.NumberOfPairs(nums);
            Console.WriteLine(result);
            Console.ReadKey();

        }
        public class Solution
        {
            public int[] NumberOfPairs(int[] nums)
            {
                bool[] record = new bool[101];
                int count = 0;


                foreach(int num in nums)
                {
                    record[num] = !(record[num]);
                    if (!record[num])
                        count++;
                }

                return new int[2] { count, nums.Length - 2 * count };
            }
        }
        //速度普通偏慢ㄟ，是這種判別方式不適合嗎?可能中途我塞了if else?
        //其他
        //這方法一樣，不過他是loop玩一次 /2 和 %2 檢查
        //https://leetcode.com/problems/maximum-number-of-pairs-in-array/solutions/2292669/divide-and-modulo/
        //這方法一樣，但這位跟我一樣每次都檢查，他用3元運算式，好像有機會加速喔
        //https://leetcode.com/problems/maximum-number-of-pairs-in-array/solutions/2292582/even-counter/
        //這是js的，用hashmap，每次都remove或add，這樣速度能快?
        //https://leetcode.com/problems/maximum-number-of-pairs-in-array/solutions/2297220/javascript-clean-hash-solution-o-n/
    }
}
