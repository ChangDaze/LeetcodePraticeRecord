using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Diagnostics;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[][] boxTypes = new int[3][] { new int[] { 1, 3 }, new int[] {2,2 }, new int[] {3,1 } };
            int truckSize = 4;
            Solution solution = new Solution();
            var result = solution.MaximumUnits(boxTypes, truckSize);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        public class Solution
        {
            public int MaximumUnits(int[][] boxTypes, int truckSize)
            {
                int result = 0;
                int resultBoxes = 0;
                var sortedBoxes = boxTypes.OrderByDescending(x => x[1]).ToArray();
                for(int i =0; i<sortedBoxes.Count();i++)
                {
                    resultBoxes += sortedBoxes[i][0];
                    result += sortedBoxes[i][1]* sortedBoxes[i][0];
                    if(resultBoxes >= truckSize)
                    {
                        result -= (resultBoxes - truckSize) * sortedBoxes[i][1];
                        break;
                    }
                }
                return result;
            }
            //也是一個很好表現greedy的題目，基本上就是由units大到小開始一直加直到限制，但我覺得應該還是有比較好的方法處理int[][]
            //速度普通
            //這個會遞減truckSize，所以後續就不用處理多出的truckSize，不過他沒有中斷機制，補上就好，速度不錯
            //https://leetcode.com/problems/maximum-units-on-a-truck/solutions/2222359/c-faster-than-14-69/
            //這個處理Array.Sort的方式不錯ㄟ，就是自己寫icomparerable，可以學一下，突破一下使用通用函式的使用限制
            //其他跟第一位差不多，速度不錯
            //https://leetcode.com/problems/maximum-units-on-a-truck/solutions/1070990/c-solution/
            //這位方法就跟我差不多，速度慢
            //https://leetcode.com/problems/maximum-units-on-a-truck/solutions/999974/c-100-100/
        }
    }
}
