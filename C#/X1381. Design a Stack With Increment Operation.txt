using System.Numerics;
using System.Text;

namespace LeetcodeConsole
{
    internal class Program
    {
        static void Main(string[] args)
        {
            CustomStack stk = new CustomStack(3); // Stack is Empty []
            stk.Push(1);                          // stack becomes [1]
            stk.Push(2);                          // stack becomes [1, 2]
            stk.Pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]
            stk.Push(2);                          // stack becomes [1, 2]
            stk.Push(3);                          // stack becomes [1, 2, 3]
            stk.Push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4
            stk.Increment(5, 100);                // stack becomes [101, 102, 103]
            stk.Increment(2, 100);                // stack becomes [201, 202, 103]
            stk.Pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]
            stk.Pop();                            // return 202 --> Return top of the stack 202, stack becomes [201]
            stk.Pop();                            // return 201 --> Return top of the stack 201, stack becomes []
            stk.Pop();                            // return -1 --> Stack is empty return -1.
            Console.WriteLine();
            Console.ReadKey();
        }
        public class CustomStack
        {
            int[] Stack;
            int pointer;
            public CustomStack(int maxSize)
            {
                Stack = new int[maxSize];
                pointer = 0;
            }

            public void Push(int x)
            {
                if(pointer < Stack.Length)
                    Stack[pointer++] = x;//先做事再加加
            }

            public int Pop()
            {
                if(pointer > 0)
                    return Stack[--pointer];//先減減再做事

                return -1;
            }

            public void Increment(int k, int val)
            {
                int stopPoint = k>pointer ? pointer : k;

                for(int i = 0; i < stopPoint; i++)                
                    Stack[i] += val;                
            }
        }
        //因為題目路都幫忙鋪好了，所以意外簡單
    }
}