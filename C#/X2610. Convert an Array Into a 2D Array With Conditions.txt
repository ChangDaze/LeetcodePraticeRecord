using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Security.Policy;
using System.Security.Cryptography;
using System.Data.SqlTypes;
using System.Reflection;
using System.Security.AccessControl;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] nums = new int[] { 1, 3, 4, 1, 2, 3, 1 };
            Solution solution = new Solution();
            var result = solution.FindMatrix(nums);
            Console.WriteLine(result);
            Console.ReadKey();
        }

        public class Solution
        {
            public IList<IList<int>> FindMatrix(int[] nums)
            {
                IList<IList<int>> result = new List<IList<int>>();
                Array.Sort(nums);

                int row = 1;//row是個數，如果是index要row-1

                result.Add(new List<int>() { nums[0] });

                for(int i = 1;i< nums.Length;i++)
                {
                    if (nums[i] == nums[i - 1])
                    {
                        row++;//相同就移向下一排
                        if (result.Count() < row)//檢查row是否充足
                            result.Add(new List<int>() { nums[i] });
                        else
                            result[row - 1].Add(nums[i]);//row充足就直接放入
                    }
                    else
                    {
                        row = 1;//不同就初始化後放入
                        result[row - 1].Add(nums[i]);
                    }
                }

                return result;
            }
        }
        //100%ㄟ，我方法跟hint不太相同，我覺得還算特殊，不過題目也算簡單理想
        //基本上就是sort後，遇到相同就新增row來放，不同就回到第一row，這樣就不用每次都重頭檢查或需要remove element
    }
}
