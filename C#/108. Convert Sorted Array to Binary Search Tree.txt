using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var nums = new int[] { 3, 5, 8 };
            Solution solution = new Solution();
            var result = solution.SortedArrayToBST(nums);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }
        public class Solution
        {
            public TreeNode SortedArrayToBST(int[] nums)
            {
                if (nums.Length == 1)
                    return new TreeNode(nums[0]);
                return Recursive(0, nums.Length - 1, nums);
            }

            public TreeNode Recursive(int start, int end, int[] nums)
            {
                if (start > end) return null;
                if (start == end)
                    return new TreeNode(nums[start], null, null);
                return new TreeNode(nums[(start + end) / 2], Recursive(start, (start + end) / 2 - 1, nums), Recursive((start + end) / 2 + 1, end, nums));
            }
        }
        //基本上是透過binary search把每個位置都走過一遍然後塞進tree裡，細節反而說不清，記得+1，-1避免數字重複，有幾個好的前提
        //(1)array是排序好的(2)binary tree在每次切半時也順利剛好切一半分到大小兩邊，可以達成tree平衡(大概)
        //速度很慢
        //其他
        //這個它方法跟我一樣，有兩個比較要注意的點
        //(1)他binary search砍半時用j + (i - j) / 2，這計算比較快，用這比較好
        //(2)他沒多做if (start == end)判斷，因為就算進入下一層也會start>end，所以不用每次浪費時間去判斷
        //所以她的寫法算我的正確版，可以學學，速度普通
        //https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solutions/650711/c-solution/
        //這有點特別，他在recursive時是用array在傳遞，說實在，本質上跟binary search一樣，速度還行
        //https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solutions/2947343/c-99ms-40-1mb/
        //這方法跟第一位一樣，速度很快
        //https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solutions/2405610/c-faster-than-72-20/
        //這有點狠，用三元運算式+oneliner來做recursive，方法本質其實一樣，速度普通
        //https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solutions/2408642/c-1-liner-recursion/
        //我最擔心的總是沒法證明不會跑到重複的或全跑完..，如果不是有答案我都不確定對不對
    }
}
