using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Security.Policy;
using System.Security.Cryptography;
using System.Data.SqlTypes;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] digits = new int[] { 2, 1, 3, 0 };
            Solution solution = new Solution();
            var result = solution.FindEvenNumbers(digits);
            Console.WriteLine(result);
            Console.ReadKey();
        }
        public class Solution
        {
            public int[] FindEvenNumbers(int[] digits)
            {
                List<int> result = new List<int>();
                int[] record = new int[11];

                //先記錄可用數字的量
                foreach (int digit in digits)
                    record[digit]++;

                //因為限制三位數，且不能0帶頭，所以窮舉最多也是 100 ~ 999(因為是偶數其實是998，且奇數其實都會被跳過)
                for (int i = 1; i < 10; i++)//這本質上也是檢查100 ~ 999，所以就不會有重複數的問題，因為100所以i從1開始
                {
                    if (record[i] > 0)//檢查量夠不夠
                        for (int j = 0; j < 10; j++)
                        {
                            if (record[j] > ((i == j) ? 1 : 0)) //如果字相同，最少要2，自不同最少要1
                                for (int k = 0; k < 10; k = k + 2)//因為只要偶數，所以這裡尾數k部分會+2
                                {
                                    //同理減查量
                                    if (record[k] > ((i == j) && (k == j) ? 2 :
                                                        (k == j) ? 1 :
                                                        (k == i) ? 1 : 0))
                                    {
                                        result.Add(i * 100 + j * 10 + k);//把數值加入解答
                                    }
                                }
                        }
                }

                return result.ToArray(); //因為是找順序 100 ~ 999，所以也不用排序
            }
        }
        //100%，不過主要是參考第一位的
        //其他
        //這位是C++和python，我就是學這方法，不過語法有些差異，【in C++, false is 0 and true is 1】，但C#不行，所以改用C#
        //主要是底下pranav_k、ErnestLin、coolwhy的討論我才看懂
        //https://leetcode.com/problems/finding-3-digit-even-numbers/solutions/1612150/three-cycles/
        //這是C++，他沒用巢狀迴圈，且每次要先拆解數字，一套做完才能確認要不要加，所以速度應該不快
        //https://leetcode.com/problems/finding-3-digit-even-numbers/solutions/1612135/c-with-explanation-o-n-solution-easy-to-understand/
        //這位C#其實方法跟第二位相同，不過速度是100%，但我本人還是比較喜歡第一位的方法，雖然多了巢狀迴圈，但應該可以提前規避無效數字
        //https://leetcode.com/problems/finding-3-digit-even-numbers/solutions/3611248/simplest-solution-c-100-efficient/
    }
}
