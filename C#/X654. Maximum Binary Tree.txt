using System.Numerics;
using System.Text;

namespace LeetcodeConsole
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] nums = new int[] { 3, 2, 1, 6, 0, 5 };
            Solution solution = new Solution();
            Console.WriteLine(solution.ConstructMaximumBinaryTree(nums));
            Console.WriteLine();
            Console.ReadKey();
        }

        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        public class Solution
        {
            public TreeNode ConstructMaximumBinaryTree(int[] nums)
            {
                Stack<TreeNode> stack = new Stack<TreeNode>();
                TreeNode currNode;
                foreach (int num in nums)
                {
                    currNode = new TreeNode(num);
                    while(stack.Count > 0 && stack.Peek().val < num)
                    {
                        currNode.left = stack.Pop();//當前面有比較小的，就會變成把它變成自己的child
                        //因為link list的特性，所以暫時性有多個parent共用一個child不影響
                    }

                    if(stack.Count > 0)
                    {
                        stack.Peek().right = currNode; //當前面有比較大的，就會變成他的child
                        //如果到此stack沒東西了，那自己就是最頂層的parent(root)
                        //如果stack還有東西，就成為其他人的child，擺脫多個parent共用一個child的情況
                    }

                    stack.Push(currNode);//把此次造好的節點放入比較
                }

                while (stack.Count > 1)
                {
                    stack.Pop();
                };
                //只取root出來
                return stack.Pop();
                //這比較是binary tree的概念，要轉換成左右max會比較抽象
                //但大致上是比前面小，就會成為他的child(【左max】)，直到前面有比自己大的，【自己會成為他】的【右max】
                //然後【左max】和【右max】的parent則會在過程中一直變動
            }
        }
        //基本上抄這位的，有點monotonic stack那味，但也有利用binary tree的特性
        //https://leetcode.com/problems/maximum-binary-tree/
    }
}