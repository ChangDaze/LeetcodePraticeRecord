using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using static System.Net.Mime.MediaTypeNames;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = 3;
            Solution solution = new Solution();
            solution.GenerateParenthesis(n);
            Console.WriteLine();
            Console.ReadKey();

        }


        public class Solution
        {
            List<string> result = new List<string>();
            public IList<string> GenerateParenthesis(int n)
            {
                Recursive("", 0, 0, n, n * 2);
                return result;
            }

            private void Recursive(string str, int left, int right, int max, int standard)
            {
                if(str.Length >= standard)
                {
                    result.Add(str);
                    return;
                }

                if(left < max)                
                    Recursive(str+'(',left+1,right,max, standard);
                

                if(right < left)                
                    Recursive(str + ')', left, right+1, max, standard);
                
            }
        }
        //其實我有想到一個解法，因為只有'('和')'，所以可以直接窮舉所有可能(2^n)，再把窮舉出的str一個個做正規Parenthesis檢查，好像也行，只是耗費資源超多
        //基本上看這位
        //這個解法主要看Parenthesis的幾個特性
        //(1)當left > right 時，尾端放入的right必定能成功閉合
        //(2)當沒有其他元素時 str.Length = Parenthesis 個數*2
        //當(1)+(2)下窮舉出的組合，必定是正規Parenthesis
        //https://leetcode.com/problems/generate-parentheses/
    }
}
