using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Security.Policy;
using System.Security.Cryptography;
using System.Data.SqlTypes;
using System.Reflection;
using System.Security.AccessControl;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = 5;
            int k = 2;
            Solution solution = new Solution();
            var result = solution.CircularGameLosers(n, k);
            Console.WriteLine(result);
            Console.ReadKey();
        }

        public class Solution
        {
            public int[] CircularGameLosers(int n, int k)
            {
                int[] circle = new int[n+1];
                circle[1] = 1;

                int pointer = 1;
                int turns = 1;
                while (true)
                {
                    pointer += turns * k;

                    if (pointer > n)
                    {
                        if (pointer % n != 0)
                            pointer = pointer % n;
                        else
                            pointer = n;
                    }
                    
                    circle[pointer]++;

                    if (circle[pointer] >= 2)
                        break;

                    turns++;
                }

                List<int> result = new List<int>();
                for(int i = 1;i<n+1;i++)
                    if (circle[i] == 0)
                        result.Add(i);

                return result.ToArray();                
            }
        }
        //就注意細節然後模擬就好，速度普通
        //下面是100%的，其實我不用特地把array n+1，也可以直接用pointer % n，因為array[0]代表n的位置來用就好，如下面寫的

        //public class Solution
        //{
        //    public int[] CircularGameLosers(int n, int k)
        //    {
        //        var map = new int[n];
        //        int index = 0, i = 1;
        //        while (true)
        //        {
        //            if (++map[index % n] == 2)
        //            {
        //                break;
        //            }
        //            index += k * i++;
        //        }

        //        var res = new List<int>();
        //        for (int j = 0; j < n; ++j)
        //        {
        //            if (map[j] == 0)
        //            {
        //                res.Add(j + 1);
        //            }
        //        }
        //        return res.ToArray();
        //    }
        //}
    }
}
