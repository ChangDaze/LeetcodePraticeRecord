using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] nums = new int[] { 1,1, 2 };
            Solution solution = new Solution();            
            int k = solution.RemoveDuplicates(nums);
            for(int i = 0; i < k; i++)
            {
                Console.WriteLine(nums[i]);
            }
            Console.ReadKey();

        }

        public class Solution
        {
            public int RemoveDuplicates(int[] nums)
                //int[]可能因為底層記憶體關係，所以直接int[i] = x會直接修改記憶體中的值不用額外ref，
                //但用new int[]或是用int[]方法return則會再找新的連續int[]記憶體來存放不是用原本記憶體
            {
                int pointer = 0;//紀錄現在參考到的點位
                
                for (int i = 1; i < nums.Length; i++)
                {
                    if(nums[pointer] != nums[i])//新的才新增參考點位，這有個大前提就是array要sort過，因此下次處理類似的sort過就能用同樣方法
                    {
                        pointer++;//設定下一個參考點位
                        nums[pointer] = nums[i];  //放入參考點位
                    }
                }

                return pointer+1;//返回的是參考點位長度
            }
        }
        //其他
        //這方法跟我一樣，不過我用for他用while和一個變數來記錄走到的長度
        //https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/11857/C-Solution
        //這方法也一樣
        //https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/822632/90-Python-95-C-Solutions
        //這是把變數和函式簡化了，方法一樣，意外地變快了，還不少
        //https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/292815/C-straightforward-and-concise
        //這方法跟我一模一樣
        //https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/278961/C-two-pointers

    }
}
