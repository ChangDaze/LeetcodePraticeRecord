using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Security.Policy;
using System.Security.Cryptography;
using System.Data.SqlTypes;
using System.Reflection;
using System.Security.AccessControl;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] groupSizes = new int[] { 3, 3, 3, 3, 3, 1, 3 };
            Solution solution = new Solution();
            var result = solution.GroupThePeople(groupSizes);
            Console.WriteLine(result);
            Console.ReadKey();
        }

        public class Solution
        {
            public IList<IList<int>> GroupThePeople(int[] groupSizes)
            {
                IList<IList<int>> result = new List<IList<int>>();
                //List<List<int>> result = new List<List<int>>(); //這樣會有轉型錯誤，可能要研究一下

                Dictionary<int,List<int>> temp = new Dictionary<int,List<int>>();

                for(int i = 0;i< groupSizes.Length;i++)
                {
                    if (temp.Keys.Contains(groupSizes[i]))                     
                        temp[groupSizes[i]].Add(i);                    
                    else
                        temp[groupSizes[i]] = new List<int>() {i};

                    if (temp[groupSizes[i]].Count() >= groupSizes[i])
                    {
                        result.Add(temp[groupSizes[i]].ToList());//不用tolist會受Clear()影響，這也要研究一下，深淺複製和tolist
                        temp[groupSizes[i]].Clear();
                    }                        
                }

                return result;
            }
        }
        //基本上題目有給一個很大的讓步，就是數量和組數一定是完全填滿，所以不用考慮多出來的部分，基本上照題目描述做就好，速度還行，100%的方法也差不多，不過他用remove造新的，我用clear清除
        //我猜這種會100%可能是很早期的紀錄?
    }
}
