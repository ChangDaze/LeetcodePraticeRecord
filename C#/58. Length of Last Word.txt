using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {

            Solution solution = new Solution();
            string s = "   fly me   to   the moon  ";
            Console.WriteLine(solution.LengthOfLastWord(s));
            Console.ReadKey();

        }


        public class Solution
        {
            public int LengthOfLastWord(string s)
            {
                string[] temp = s.Split(' ');
                for (int i = temp.Length - 1; i >= 0; i--)//倒過來走所以遇到的第一個字串就是最後的字串然後直接return
                {
                    if (String.IsNullOrEmpty(temp[i]))
                    {
                        continue;
                    }
                    return temp[i].Length;
                }
                return 0;

            }
        }
        //解1:乾直接用高級版split可以拆分後返回非空字串陣列，然後直接取最尾長度https://docs.microsoft.com/zh-tw/dotnet/api/system.stringsplitoptions?view=net-6.0  (cntrl+F : StringSplitOptions.RemoveEmptyEntries)
        //解2:跟第三個人解法有點像，找出起始位置和結束位置，不過他算長度的方法是用走一步就++一次，感覺沒比較好，但寫法簡潔很多，少個布林判斷
        //https://leetcode.com/problems/length-of-last-word/discuss/848121/C-O(n)-solutions
        //這個很慢但解法很特別，沒有用split直接判斷最後字串的起始位置和結束位置(起始位置-結束位置+1)得到長度，結束位置是從後走來第一個非' '，
        //起始位置是找到結束位置後第一個' '+1
        //https://leetcode.com/problems/length-of-last-word/discuss/21957/C-Solution
        //LINQ超簡易版本，速度就普通S，直接用Trim().Split().LastOrDefault()，不過要注意先用Trim去掉頭尾空白
        //https://leetcode.com/problems/length-of-last-word/discuss/293401/C-1-liner

    }
}
