using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            MyQueue solution = new MyQueue();
            solution.Push(1);
            solution.Push(2);
            var peek = solution.Peek();
            var pop = solution.Pop();
            Console.ReadKey();

        }

        public class MyQueue
        {
            private Stack<int> stack1 ;
            private Stack<int> stack2 ;

            public MyQueue()
            {
                stack1= new Stack<int>();
            }

            public void Push(int x)
            {
                stack1.Push(x);
                stack2= new Stack<int>(stack1);
                //stack的建構式很特別，不用reverse，就夠時就會依丟入陣列先進先後出了
                //new來new去感覺有點白痴，再看看其他人怎麼做好了(雖然可能也是foreach..)
            }

            public int Pop()
            {
                int answer = stack2.Pop();
                stack1 = new Stack<int>(stack2);//push時要記得調stack2、pop時要記得調stack1讓兩邊同步
                return answer;
            }

            public int Peek()
            {
                return stack2.Peek();
            }

            public bool Empty()
            {
                return stack1.Count== 0;
            }
        }

        /**
         * Your MyQueue object will be instantiated and called as such:
         * MyQueue obj = new MyQueue();
         * obj.Push(x);
         * int param_2 = obj.Pop();
         * int param_3 = obj.Peek();
         * bool param_4 = obj.Empty();
         */
    }
}
