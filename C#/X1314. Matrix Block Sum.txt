using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{

    class Program
    {
        static void Main(string[] args)
        {
            int[][] mat = new int[][] { new int[] {1,2,3 }, new int[] { 4,5,6 }, new int[] { 7,8,9 } };

            int k = 1;

            Solution solution = new Solution();
            var result = solution.MatrixBlockSum(mat,k);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        //2023.0909.1455
        public class Solution
        {
            public int[][] MatrixBlockSum(int[][] mat, int k)
            {
                //製作一個preSum
                int[][] preSumMat = new int[mat.Length][];                
                for(int i = 0;i< mat.Length;i++)
                {
                    int preSum = 0;
                    int[] tempArray = new int[mat[0].Length];
                    preSumMat[i] = new int[mat[i].Length];
                    for (int j = 0; j < mat[0].Length; j++)
                    {
                        preSum += mat[i][j];                       

                        if (i > 0)                        
                            tempArray[j] = preSum + preSumMat[i-1][j];
                        else
                            tempArray[j] = preSum;

                    }
                    tempArray.CopyTo(preSumMat[i],0);
                }

                //製作答案
                int[][] result = new int[mat.Length][];
                for (int i = 0; i < mat.Length; i++)
                {
                    int iStart = i - k;
                    int iEnd = i + k < mat.Length ? i + k : mat.Length-1;
                    int[] tempArray = new int[mat[0].Length];
                    result[i] = new int[mat[i].Length];
                    for (int j = 0; j < mat[0].Length; j++)
                    {
                        int jStart = j - k;
                        int jEnd = j + k < mat[0].Length ? j + k : mat[0].Length - 1;

                        if (iStart <= 0 && jStart <= 0)
                            tempArray[j] = preSumMat[iEnd][jEnd];
                        else if (iStart <= 0)
                            tempArray[j] = preSumMat[iEnd][jEnd] - preSumMat[iEnd][jStart-1];
                        else if (jStart <= 0)
                            tempArray[j] = preSumMat[iEnd][jEnd] - preSumMat[iStart-1][jEnd];
                        else
                            tempArray[j] = preSumMat[iEnd][jEnd] - preSumMat[iStart - 1][jEnd]
                                - preSumMat[iEnd][jStart - 1] + preSumMat[iStart - 1][jStart - 1];
                    }
                    tempArray.CopyTo(result[i], 0);
                }

                return result;
            }
        }

    }


}
