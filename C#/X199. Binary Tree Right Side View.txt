using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            TreeNode root = new TreeNode(1,
                                new TreeNode(2,null,new TreeNode(5)),
                                new TreeNode(3, null, new TreeNode(4)));
            Solution solution = new Solution();

            Console.WriteLine(solution.RightSideView(root));
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        //2023.0912.0710
        public class Solution
        {
            public IList<int> RightSideView(TreeNode root)
            {
                
                List<Tuple<TreeNode,int>> record = new List<Tuple<TreeNode, int>>();
                if (root != null)
                    record.Add(new Tuple<TreeNode, int>(root, 0));
                for (int i = 0; i < record.Count(); i++)
                {
                    var currentNode = record[i];
                    if (currentNode.Item1 == null) continue;
                    if (currentNode.Item1.left != null)
                    {
                        record.Add(new Tuple<TreeNode, int>(currentNode.Item1.left, currentNode.Item2+1));
                    }
                    if (currentNode.Item1.right != null)
                    {
                        record.Add(new Tuple<TreeNode, int>(currentNode.Item1.right, currentNode.Item2 + 1));
                    }
                }

                List<int> result = new List<int>();

                for(int i = 1; i < record.Count(); i++)
                {
                    if (record[i].Item2 != record[i - 1].Item2)
                        result.Add(record[i - 1].Item1.val);
                }

                if (record.Count > 0)
                    result.Add(record[record.Count() - 1].Item1.val);


                return result;
            }
        }
    }
}
