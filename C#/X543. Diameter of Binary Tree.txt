using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root = new TreeNode(1, new TreeNode(2, new TreeNode(4), new TreeNode(5)), new TreeNode(3));
            Solution solution = new Solution();
            var result = solution.DiameterOfBinaryTree(root);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }


        public class Solution
        {
            int maxDepth = 0;
            public int DiameterOfBinaryTree(TreeNode root)
            {
                FindDepth(root);               
                return maxDepth;
                //如果是BST會讓左右平衡長，最長路徑就一定會穿越根源root，就只要算左右深度就好，但這題tree不平衡長
            }

            public int FindDepth(TreeNode node)
            {
                if(node == null) return 0;//有點沒實感，基本上就是由下往上數，在每個node(root)檢查他底下的最長路徑做比較
                int leftDepth = FindDepth(node.left);//此root左邊最深
                int rightDepth = FindDepth(node.right);//此root右邊最深
                if (leftDepth + rightDepth > maxDepth) maxDepth = leftDepth + rightDepth;//跟max路徑比較
                return leftDepth > rightDepth? leftDepth+1:rightDepth+1;//此root比完拿出最深深度加上自己這層丟回上層
            }
        }

    }
}
