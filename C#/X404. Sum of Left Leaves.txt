using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root = new TreeNode(1, new TreeNode(2, new TreeNode(3, new TreeNode(4))));
            Solution solution = new Solution();
            var result = solution.SumOfLeftLeaves(root);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }


        public class Solution
        {
            int sum = 0;
            public int SumOfLeftLeaves(TreeNode root)
            {
                //若只有root一個node好像不算左邊葉子所以不用考慮(可用testcase測)
                Recurive(root.left, 'L');//因為root下去就可能碰到葉子所以這樣走函式
                Recurive(root.right, 'R');
                return sum;
            }

            public void Recurive(TreeNode node, char direction)//基本上就是說明是屬於左右哪邊然後找出葉子就好
            {
                if(node == null) return;
                if(node.left == null && node.right == null && direction == 'L')
                {
                    sum += node.val;
                    return;
                }
                Recurive(node.left, 'L');
                Recurive(node.right, 'R');
                return;
            }
        }

    }
}
