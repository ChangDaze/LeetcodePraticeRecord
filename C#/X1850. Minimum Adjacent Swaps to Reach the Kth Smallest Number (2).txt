using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using static System.Net.Mime.MediaTypeNames;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            string num = "314977436385950217099696082899394642459623595509221123784881341282890502676038467317353751935";
            int k = 285;
            Solution solution = new Solution();
            solution.GetMinSwaps(num,k);
            Console.WriteLine();
            Console.ReadKey();

        }


        public class Solution
        {
            public int GetMinSwaps(string num, int k)
            {
                int[] numArray = new int[num.Length];

                for(int i = 0; i < num.Length; i++)                
                    numArray[i] = num[i] - '0';

                int[] target = new int[numArray.Length];

                numArray.CopyTo(target, 0);

                for (int i = 0; i < k; i++)
                {
                    NextPermutation(numArray);
                }

                //int[] 轉 int
                //long result = 0;
                //for (int i = 0; i < numArray.Length; i++)
                //{
                //    result += numArray[i] * Convert.ToInt64(Math.Pow(10, numArray.Length - i - 1));
                //}

                return CountSteps(numArray,target,numArray.Length);
            }

            private void NextPermutation(int[] nums)
            {
                for (int i = nums.Length - 1; i > 0; i--)
                {
                    if (nums[i - 1] < nums[i])//直到nums[i - 1]確定不是升序
                    {
                        ReverseSubArray(nums, i, nums.Length - 1);//i-1以後index確定變降序(當前最小組合)
                        for (int j = i; j < nums.Length; j++)//nums[i - 1]是要替換為找到比自己略大的目標
                        {
                            if (nums[j] > nums[i - 1])//在升序中找到略大值跟他替換(因為升序排序過，就算替換也i-1以後index還是維持升序)
                            {
                                int temp = nums[i - 1];
                                nums[i - 1] = nums[j];
                                nums[j] = temp;
                                return;
                            }
                        }
                    }
                }
                Array.Sort(nums);//沒找到就返回排序後的值
            }

            private void ReverseSubArray(int[] nums, int i, int j)
            {
                int temp = 0;
                while (i < j)
                {
                    temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                    i++; j--;
                }
            }

            public void swap(int[] nums, int i, int j)
            {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }

            //基本上就是土方法由前向後一個個做倆倆泡沫排序移動就好
            private int CountSteps(int[] s1, int[] s2, int size)
            {
                int i = 0, j = 0;
                int count = 0;

                while (i < size)
                {
                    j = i;

                    while (s1[j] != s2[i])
                    {
                        j += 1;
                    }
                    while (i < j)
                    {
                        swap(s1, j, j - 1);
                        j -= 1;
                        count++;
                    }
                    i++;
                }
                return count;
            }
        }
        //方法是這位的，基本上就是Q31 + 換為比對而已
        //https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/solutions/1187098/next-permutation-adjacent-swapping/
    }
}
