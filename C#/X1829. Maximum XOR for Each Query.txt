using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] nums = new int[] { 0, 1, 1, 3 };
            int maximumBit = 2;
            Solution solution = new Solution();
            var result = solution.GetMaximumXor(nums,maximumBit);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        public class Solution
        {
            public int[] GetMaximumXor(int[] nums, int maximumBit)
            {
                int[] result = new int[nums.Length];
                result[nums.Length-1] = 0 ^ nums[0]^(int)(Math.Pow(2, maximumBit) - 1);

                for(int i = 1;i<nums.Length;i++)
                    result[nums.Length-1-i] = result[nums.Length - i] ^nums[i];

                return result;
            }            
        }
        //這題就是題目很難看懂而已，簡單來說
        //1.會進行n次行動
        //2.nums會隨行動參考範圍縮小
        //3.result填入答案是【順序】，參考範圍縮小是【倒序】，所以填入答案會和prefix順序相反
        //4.答案要求【參考範圍】內所有XOR再XOR【k】的到【最大值】
        //5.k 必定要是 Math.Pow(2, maximumBit) - 1  ， (題目的第一點有兩段說明，倒過來看比較順)，(1)k<2^maximumBit(2)求【參考範圍】XOR【k】【最大值】
        //6.所以【最大值】必定要是 Math.Pow(2, maximumBit) - 1，因為題目也限制 0 <= nums[i] < 2^maximumBit
        //7.所以只要【參考範圍】XOR【k】= Math.Pow(2, maximumBit) - 1，k就是答案，所以【參考範圍】XOR 【Math.Pow(2, maximumBit) - 1】= 【k】
        //8.nums​​​ is sorted in ascending order.這應該有用意，之前好像有遇過相同數字XOR必消失這個條件失效，可能跟這個有關?
    }
}
