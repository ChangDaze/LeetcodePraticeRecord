using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            TreeNode root = new TreeNode(3,new TreeNode(9),new TreeNode(20,new TreeNode(15),new TreeNode(7)));
            Solution solution = new Solution();

            Console.WriteLine(solution.MaxDepth(root));
            Console.ReadKey();

        }
        
         
        public class TreeNode {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }
         
        public class Solution
        {
            public int MaxDepth(TreeNode root)
            {
                return recursive(root, 0, 0);//original currentdepth=0,maxdepth=0
            }

            public int recursive(TreeNode _root,int _currentdepth,int _maxdepth)
            {
                if (_root == null)//null node not need to deal
                {
                    return _maxdepth;
                }
                _currentdepth++;//_root not null mean this node need to count
                if(_currentdepth > _maxdepth)//judge break the record or not
                    _maxdepth = _currentdepth;

                _maxdepth = recursive(_root.left, _currentdepth, _maxdepth);//just do all left and right subtree recursive
                _maxdepth = recursive(_root.right, _currentdepth, _maxdepth);
                return _maxdepth;// return result

            }
        }
        //other
        //這個很簡潔，NULL舊return0，非null的就+1，理念應該是左邊和右邊的subtree比depth大小，但因為是recusive我不知道用math.max算不算好
        //https://leetcode.com/problems/maximum-depth-of-binary-tree/discuss/131072/c-implementation
        //這個跟上一個一樣ㄟ
        //https://leetcode.com/problems/maximum-depth-of-binary-tree/discuss/286138/C-DFS
        //這個也一樣不過更加concise，就結論講我的好像比較快，好像還快不少
        //https://leetcode.com/problems/maximum-depth-of-binary-tree/discuss/600724/C-concise-solution

    }
}
