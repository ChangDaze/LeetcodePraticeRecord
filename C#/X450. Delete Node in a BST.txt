using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root = new TreeNode(5);
            //var root = new TreeNode(5, new TreeNode(3), new TreeNode(6,null, new TreeNode(7)));
            int k = 5;
            Solution solution = new Solution();
            var result = solution.DeleteNode(root,k);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        //2023.0914.0554
        public class Solution
        {
            public TreeNode DeleteNode(TreeNode root, int key)
            {
                TreeNode node = root;
                TreeNode parentNode = null;
                while (node != null && node.val != key)
                {
                    parentNode = node;
                    if (node.val > key)                    
                        node = node.left;                    
                    else
                        node = node.right;
                }

                if (node is null) return root;//沒有target

                //degree 0
                if(node.left is null && node.right is null)
                {
                    if (parentNode is null)//target是root
                        return null;
                    else if (parentNode.val > node.val)
                        parentNode.left = null;
                    else
                        parentNode.right = null;
                }
                //degree 1
                else if (node.left is null && node.right !=null)
                {
                    if (parentNode is null)
                        return node.right;
                    else if (parentNode.val > node.val)
                        parentNode.left = node.right;
                    else
                        parentNode.right = node.right;
                }
                else if (node.left != null && node.right is null)
                {
                    if (parentNode is null)
                        return node.left;
                    else if (parentNode.val > node.val)
                        parentNode.left = node.left;
                    else
                        parentNode.right = node.left;
                }
                //degree 2
                else
                {
                    TreeNode tempNode = node.right;
                    parentNode = node;//這裡之後parent一定不是null
                    while (tempNode.left != null)
                    {
                        parentNode = tempNode;
                        tempNode = tempNode.left;
                    }                                                                

                    //只檢查右邊
                    //degree0
                    if (tempNode.right is null)
                    {
                        if (parentNode.val > tempNode.val)
                            parentNode.left = null;
                        else
                            parentNode.right = null;
                    }
                    //degree1
                    else
                    {
                        if (parentNode.val > tempNode.val)
                            parentNode.left = tempNode.right;
                        else
                            parentNode.right = tempNode.right;
                    }

                    node.val = tempNode.val;
                }

                return root;
            }
        }
        //https://www.youtube.com/watch?v=QzO0rag6geA&list=PLil-R4o6jmGiDc1CC8PyBbasl8kR9r8Wr&index=16&ab_channel=%E8%87%BA%E5%A4%A7%E7%A7%91%E5%AD%B8%E6%95%99%E8%82%B2%E7%99%BC%E5%B1%95%E4%B8%AD%E5%BF%83CASE
    }
}
