using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            Solution solution = new Solution();
            var s = "ub?v?w";
            var result = solution.ModifyString(s);
            Console.WriteLine(result);
            
            Console.ReadKey();

        }


        public class Solution
        {
            public string ModifyString(string s)
            {
                char prior = 'z';
                char now = ' ';
                char next = ' ';
                string result = "" ;

                for (int i = 0; i < s.Length; i++)
                {
                    now = s[i];
                    if(i != s.Length - 1)
                    {
                        next = s[i + 1];
                    }

                    if (now == '?')
                    {
                        char temp = 'a';
                        while(temp == prior || temp == next)//我覺得這邊設的不錯
                        {
                            temp = (char)(temp + 1);
                        }
                        result = result + temp;
                        prior = temp;
                    }
                    else
                    {                        
                        result = result + now;
                        prior = now;
                    }

                    
                }

                return result;
            }
            //我的條件有點分散，可以多參考別人清楚的複合條件，速度普通
            //其他
            //這個人條件設得很清楚(1) if(i-1>=0 && j == sb[i-1])   (2)if(i+1<sb.Length && j == sb[i+1]) continue; 只要這兩者過他就填字本質上跟我差不多，不過我小動作可以在精簡一點
            //也告訴我prior和next不用特別存，直接用i取就好，速度還不錯
            //https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/solutions/1174115/c-solution/
            //這個人頗猛，因為一定不會有三個char重複，所以她只檢查前三個字a、b、c，厲害，速度不錯，就是用途限定
            //https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/solutions/837923/c/
            //這個人方法跟我差不多，不過他換字母避免連續的手法有點扭曲，感覺跟我一樣直接+1就好，速度普通
            //https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/solutions/910706/c-solution/
        }

    }
}
