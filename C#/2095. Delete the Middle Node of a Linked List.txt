using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            ListNode linkList = new ListNode(1, new ListNode(3, new ListNode(4, new ListNode(7, new ListNode(1, new ListNode(2, new ListNode(6)))))));
            var solution = new Solution();
            var result = solution.DeleteMiddle(linkList);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        public class ListNode
        {
            public int val;
            public ListNode next;
            public ListNode(int val = 0, ListNode next = null)
            {
                this.val = val;
                this.next = next;
            }
        }

        public class Solution
        {
            public ListNode DeleteMiddle(ListNode head)
            {
                //這題題目的middle當是雙數時是要靠後，所以我們two step結束的步數就是one step到中點的步數(因為linklist不能回頭，所以while是 two step先做)
                //也幸好 hint提供two step提示
                if (head.next == null) return null;//當長度只有1時不能跳

                ListNode oneStep = head;
                ListNode twoStep = head;

                while (twoStep.next != null)//當長度剛好結束會從這跳
                {
                    //先做兩步的
                    for (int i = 0; i < 2; i++)
                    {
                        twoStep = twoStep.next;
                        if (twoStep.next is null) break;//two step可能中途結束所以要檢查避免錯誤
                    }

                    if (twoStep.next is null) break;//從for迴圈 null 出來要再跳一次，避免oneStep移動

                    //再做一步的(因為linklist不能回頭，所以在到達middle前就要停下)
                    oneStep = oneStep.next;
                }

                oneStep.next = oneStep.next.next;//跳過中間點

                return head;
            }
        }
        //大部分人方法都一樣，這位JAVA則是比較樸素，算出長度，然後跑第二輪停在middle node 前這樣來處理
        //https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/solutions/2700496/easy-java-solution-for-beginners-fully-explained/
        //這位JAVA是用Recursive，還蠻多人用recursive，不過說實話比較難懂
        //方法一樣是先數到尾巴，會得到長度countFromH，然後countFromH%2是用來確認中間點是(len/2)或(len/2+1)，然後在head.next時跳過中間點
        //雖然看不太出來，但結束前概念上應該有兩條linked list，一個是答案，一個是middle node 為 head node list，只是沒有了 previous node
        //https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/solutions/3817295/recursive-single-pass/

    }
}
