using System.Numerics;
using System.Text;

namespace LeetcodeConsole
{
    internal class Program
    {
        static void Main(string[] args)
        {
            TreeNode root = new TreeNode(0, new TreeNode(1, null, new TreeNode(2)), new TreeNode(3));
            
            Solution solution = new Solution();
            Console.WriteLine(solution.LcaDeepestLeaves(root));
            Console.ReadKey();
        }

        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        //2023.12.04 recursive
        public class Solution
        {
            Dictionary<int, int> records = new Dictionary<int, int>();
            public TreeNode LcaDeepestLeaves(TreeNode root)//第二個recursive
            {
                if (root == null || Recursive(root.left) == Recursive(root.right)) return root!;//這裡做完時hashtable已經收集齊了
                return LcaDeepestLeaves(Recursive(root.left) > Recursive(root.right) ? root.left : root.right);//這裡會一路比大小到最底層，如果最後是leaf 會是 left null depth 0 = right null depth 0 返回 leaf
            }

            public int Recursive(TreeNode node)//第一個recursive
            {
                if (node is null) return 0;
                if (records.ContainsKey(node.val))
                    return records[node.val];

                records.Add(node.val, 1 + Math.Max(Recursive(node.left), Recursive(node.right)));
                return records[node.val];
            }
        }
        //兩個recursive，簡單來說是由下往上紀錄深度 + hashtable
        //抄這位的
        //https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/solutions/334583/java-o-n-short-simple-recursion/



    }
}