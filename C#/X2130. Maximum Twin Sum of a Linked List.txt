using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{

    class Program
    {
        static void Main(string[] args)
        {
            ListNode listNode = new ListNode()
            {
                val = 1,
                
                next = new ListNode()
                {
                    val = 100000
                }
            };

            Solution solution = new Solution();
            var result = solution.PairSum(listNode);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        public class ListNode
        {
            public int val;
            public ListNode next;
            public ListNode(int val = 0, ListNode next = null)
            {
                this.val = val;
                this.next = next;
            }
        }

        public class Solution
        {
            public int PairSum(ListNode head)
            {
                //因為不知道n所以直接走到尾，且題目保證node一定兩兩成對，想了一下還是放棄，linklist不可回頭的特性這裡有點卡人
                List<int> record = new List<int>();//直接記起來硬幹，然後就變一般陣列題目了，感覺像是在逃避題目..
                ListNode temp = head;
                while(temp != null)
                {
                    record.Add(temp.val);
                    temp = temp.next;
                }

                int max = int.MinValue;
                for(int i = 0;i<= (record.Count / 2) -1; i++)
                {
                    if (record[i] + record[record.Count - 1 - i] > max)
                        max = record[i] + record[record.Count - 1 - i];
                }

                return max;
            }
        }
        //看了大家都是乖乖的reverse中間的linklist在進行比對，看來reverse是linklist很重要的技巧，應該可以不用recursive，就額外做個funtion定式就好，下次要好好把reverse學起來
        //https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list/solutions/1675791/my-java-solution-using-the-concepts-of-linkedlist/?envType=study-plan-v2&envId=leetcode-75

    }


}
