using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{

    class Program
    {
        static void Main(string[] args)
        {
            MyCircularDeque myCircularDeque = new MyCircularDeque(3);
            myCircularDeque.InsertLast(1);  // return True
            myCircularDeque.InsertLast(2);  // return True
            myCircularDeque.InsertFront(3); // return True
            myCircularDeque.InsertFront(4); // return False, the queue is full.
            myCircularDeque.GetRear();      // return 2
            myCircularDeque.IsFull();       // return True
            myCircularDeque.DeleteLast();   // return True
            myCircularDeque.InsertFront(4); // return True
            myCircularDeque.GetFront();     // return 4
            Console.WriteLine();
            Console.ReadKey();

        }

        //2023.09.10.1019
        public class MyCircularDeque
        {
            List<int> queue;
            int limit;
            public MyCircularDeque(int k)
            {
                queue= new List<int>();
                limit= k;
            }

            public bool InsertFront(int value)
            {
                if(queue.Count < limit)
                {
                    queue.Insert(0, value); 
                    return true;
                }
                else                
                    return false;                
            }

            public bool InsertLast(int value)
            {
                if (queue.Count < limit)
                {
                    queue.Insert(queue.Count,value);
                    return true;
                }
                else
                    return false;
            }

            public bool DeleteFront()
            {
                if (queue.Count > 0)
                {
                    queue.RemoveAt(0);
                    return true;
                }
                else
                    return false;
            }

            public bool DeleteLast()
            {
                if (queue.Count > 0)
                {
                    queue.RemoveAt(queue.Count-1);
                    return true;
                }
                else
                    return false;
            }

            public int GetFront()
            {
                if (queue.Count > 0)
                    return queue[0];                
                else
                    return -1;
            }

            public int GetRear()
            {
                if (queue.Count > 0)
                    return queue[queue.Count-1];
                else
                    return -1;
            }

            public bool IsEmpty()
            {
                return queue.Count == 0;
            }

            public bool IsFull()
            {
                return queue.Count == limit;
            }
        }
        //就硬幹
    }


}
