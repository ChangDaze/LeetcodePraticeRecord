using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] prices = new int[] { };
            Solution solution = new Solution();
            var result = solution.FinalPrices(prices);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        public class Solution
        {
            public int[] FinalPrices(int[] prices)
            {
                int[] result = new int[prices.Length];
                Stack<int> stack = new Stack<int>();
                for(int i = 0;i<prices.Length ;i++)
                {
                    while(stack.Count> 0 && prices[stack.Peek()]>= prices[i])//注意這邊是while，所以順利的話stack會全拿出來比
                        result[stack.Peek()] = prices[stack.Pop()] - prices[i];                    
                    stack.Push(i);
                }

                if (stack.Count == prices.Length) 
                    return prices;
                else if(stack.Count> 0)
                {
                    while (stack.Count() > 0)
                        result[stack.Peek()] = prices[stack.Pop()];
                } 

                return result;
            }
        }
        //可以好好思考一下邏輯，不看參考能通一定很爽
        //有個名言 Monotonic Stack contains the elements which are either increasing only or decreasing only.
        //1.是指i，每次peek的i 必小於 current i
        //2.是指prices[i]殘留在stack中順序必是遞增，因為還未遇到比自己小的值
        //主要參考 正向來
        //https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/solutions/685325/using-stack/
        //反向來 原理一樣
        //https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/solutions/686000/java-stack/
    }
}
