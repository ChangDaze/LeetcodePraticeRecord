using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root = new TreeNode(1, new TreeNode(2,null,new TreeNode(4)), new TreeNode(3, null, new TreeNode(5)));
            Solution solution = new Solution();
            var result = solution.IsCousins(root,5,4);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }


        public class Solution
        {
            List<int> target =new List<int>();
            int[][] record = new int[2][];//總覺得這種存法不好，不過也是為了不走第二遍，如果一次只找一個目標就會砍起來不錯，但又要重頭走，效率卻降低
            public bool IsCousins(TreeNode root, int x, int y)
            {
                target.Add(x); target.Add(y);
                Recurive(root, 0,-1);
                if (record[0][0] != record[1][0] && record[0][1] == record[1][1]) 
                    return true;
                return false;       
                //速度普通，可以看看有沒有好的方法
            }

            public void Recurive(TreeNode node,int depth, int parent)
            {
                if(node == null || (record[0]!=null && record[1]!=null)) return;
                Recurive(node.left,depth+1, node.val);
                Recurive(node.right,depth+1, node.val);
                int temp = target.IndexOf(node.val);
                if (temp!=-1)
                    record[temp] = new int[2] {parent,depth};
                return;                    
            }
        }

    }
}
