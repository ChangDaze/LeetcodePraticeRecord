using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            TreeNode root = new TreeNode(-1,
                                new TreeNode(0,
                                    new TreeNode(-2,
                                        new TreeNode(8)),
                                    new TreeNode(4)),
                                new TreeNode(3));
            TreeNode p = new TreeNode(8);
            TreeNode q = new TreeNode(0);
            Solution solution = new Solution();

            Console.WriteLine(solution.LowestCommonAncestor(root,p,q));
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        //2023.09.02.2343
        public class Solution
        {
            public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q)
            {
                TreeNode currentNode = root;
                TreeNode result = root;
                Stack<TreeNode> stack = new Stack<TreeNode>();
                bool pFlag = false;
                bool qFlag = false;
                while (stack.Count > 0 || currentNode != null)
                {
                    if (currentNode != null)
                    {
                        stack.Push(currentNode);//要先放節點，因為第二目標可能在目前目標的子節點
                        if(currentNode.val == p.val)
                        {
                            pFlag = true;
                            currentNode = null;
                            break;
                        }
                        if (currentNode.val == q.val)
                        {
                            qFlag = true;
                            currentNode = null;
                            break;
                        }
                        currentNode = currentNode.left;
                    }
                    else
                        currentNode = stack.Pop().right;
                }

                bool stopFlag = false;
                while (stack.Count() > 0 && !stopFlag)
                {
                    result = stack.Pop();//會由近的母節點一路做到遠的母節點
                    //看哪個目標是第一目標來找第二目標
                    if (pFlag)
                        stopFlag = Recursive(result, q.val,false);
                    else
                        stopFlag = Recursive(result, p.val, false);
                }

                return result;
            }

            private bool Recursive(TreeNode node, int target, bool stop)
            {
                //確定有stop就可以撤退了
                if (stop) return true;//優先權大要先判斷，不然進來如果是null會導致true變false
                if (node == null) return false;                
                stop = Recursive(node.left, target,stop);
                if (node.val == target) return true;
                stop = Recursive(node.right, target, stop);
                return stop;
            }
        }
        //基本上就是一路紀錄未完全檢查的母節點，當找到低一個目標後，就用stack裡的母節點來找第二目標，找之前先訂下在哪個母節點之下，因為母節點開找會一路往下全找，找完會跳下個節點未檢查部分，所以基本上應該不會重複跑?
        //這個JAVA蠻抽象的，基本上是
        //(1)left != null && right != null代表目標一、二在左右subtree分別找到了 return root 母節點
        //(2-1)left != null ? left : right若(1)的情況下在recursive向上返回，可以保留lowest 母節點(保留找到的答案)
        //(2-2)left != null ? left : right可能是目前的子節點只找到一個目標，持續向上傳遞，直到(1)達成更新 return root
        //(2-3)left != null ? left : right若(2-2)一直沒達成(1)就是默認(2-2)沒找到的目標二其實就在那個root的子節點，只是當初找到第一個目標就沒繼續往下檢查了
        //這種方法是O(n)但也一定O(n)，因為一定會走完整棵樹，可以看看評論說的，酖因為(2-3)因素，所以可能一定還是得走完
        //https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/solutions/65226/my-java-solution-which-is-easy-to-understand/
        //這位JAVA方法跟上一位相同
        //https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/solutions/65225/4-lines-c-java-python-ruby/
        //這位C++方法跟上兩位也相同
        //https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/solutions/1405170/4-steps-solution-easy-heavily-explained-with-complexities/
        //這位JAVA解法也很帥，他是BFS，
        //(1)他有hashmap紀錄所有經過節點的子節點和母節點(stack只是他iterate用的工具後面沒用到)
        //(2)他把p的母節點(會先add，所以是當下自己，不是只放母節點)全拿出來到Set<TreeNode> ancestors ，拿完了就因為null停止while
        //(3)把q同樣做(2)的動作，差異是發現ancestors裡已有q就停下，這就是p、q共同母節點
        //(4)返回q
        //ps:p、q在(2)、(3)時是位會一直變動為母節點，(1)則是沿路都要push，時間是O(n)，但空間上存的東西多一些，當然題目一定要p、q都必定存在
        //https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/solutions/65236/java-python-iterative-solution/
    }
}
