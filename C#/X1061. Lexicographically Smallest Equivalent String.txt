using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            string s1 = "parker", s2 = "morris", baseStr = "parser";
            Solution solution = new Solution();
            var result = solution.SmallestEquivalentString(s1,s2,baseStr);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class Solution
        {
            int[] graph = new int[26];
            public string SmallestEquivalentString(string s1, string s2, string baseStr)
            {
                

                for(int i= 0; i < 26; i++)//原本沒分組大家的root都是自己
                    graph[i] = i;
                
                for(int i = 0; i< s1.Length; i++)
                {
                    int root1 = Find(s1[i] - 'a');
                    int root2 = Find(s2[i] - 'a');
                    if (root1 < root2)//只有小的會做紀錄並後續比較
                        graph[root2] = root1;
                    else
                        graph[root1] = root2;
                }

                StringBuilder sb = new StringBuilder();
                for(int i=0;i<baseStr.Length;i++)//把目標一個個換成小組的root
                    sb.Append((char)('a' + Find(baseStr[i] - 'a')));

                return sb.ToString();
            }

            private int Find(int index)
            {
                while (graph[index]!=index)//會從沿路的比較紀錄直到找到【同群中】最小的
                    index = graph[index];

                return index;
            }
        }
        //https://www.techiedelight.com/zh-tw/disjoint-set-data-structure-union-find-algorithm/
        //https://leetcode.com/problems/lexicographically-smallest-equivalent-string/solutions/306768/union-find-solution-java/
    }
}
