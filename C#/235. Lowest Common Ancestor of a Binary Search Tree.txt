using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            //TreeNode tree = new TreeNode(6)
            //{
            //    left = new TreeNode(2)
            //    {
            //        left = new TreeNode(0),
            //        right = new TreeNode(4)
            //        {
            //            left = new TreeNode(3),
            //            right = new TreeNode(5),
            //        },
            //    },
            //    right = new TreeNode(8)
            //    {
            //        left = new TreeNode(7),
            //        right = new TreeNode(9),
            //    },
            //};

            //TreeNode p = new TreeNode(2)
            //{
            //    left = new TreeNode(0),
            //    right = new TreeNode(4)
            //    {
            //        left = new TreeNode(3),
            //        right = new TreeNode(5),
            //    },
            //};

            //TreeNode q = new TreeNode(4)
            //{
            //    left = new TreeNode(3),
            //    right = new TreeNode(5),
            //};

            TreeNode tree = new TreeNode(2)
            {
                left = new TreeNode(1)
                {
                },
            };

            TreeNode p = new TreeNode(2)
            {
                left = new TreeNode(1)
                {
                },
            };

            TreeNode q = new TreeNode(1);

            Solution solution = new Solution();
            Console.WriteLine(solution.LowestCommonAncestor(tree, q, p).val);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int x) { val = x; }
        }


        //public class Solution
        //{
        //    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q)
        //    {
        //        //只要樹分岔了目前的點就是最短祖先點(主要是完全符合二元搜尋樹的情況下)
        //        //https://zh.wikipedia.org/zh-tw/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9
        //        if (root.val == p.val || root.val == q.val)//只要還沒分岔就碰到某一點的話此點就會是最短祖先點
        //        {
        //            return root;
        //        }
        //        else if (root.val > p.val)
        //        {
        //            if (root.val < q.val)//分岔
        //            {
        //                return root;
        //            }
        //            else//都小於目前點
        //            {
        //                return LowestCommonAncestor(root.left, p, q);//往左走
        //            }

        //        }
        //        else if (root.val < p.val)//如果完全符合二元搜尋樹的情況下這裡好像可以直接用else，不過試過也沒快多少，但可以
        //        {
        //            if (root.val > q.val)//分岔
        //            {
        //                return root;
        //            }
        //            else//都大於目前點
        //            {
        //                return LowestCommonAncestor(root.right, p, q);//往右走
        //            }
        //        }
        //        else//為了讓function閉合才加的，順便能處理例外狀況?
        //        {
        //            return null;
        //        }


        //    }
        //    //其他
        //    //這個比較簡潔，1.用<=之類的含等於的判斷把我第一個等於判斷和後面的分岔判斷融合在一起，2.知道沒有分岔後其實只要判斷一個是小於另一個必定也是小於(可以少判斷一次)
        //    //不過可能<=隱含比較多判斷，所以他也沒比較快
        //    //https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/discuss/649712/c-solution
        //}

        public class Solution
        {
            public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q)
            {
                if (root == p || root == q) return root;
                if (p.val < root.val && q.val < root.val)//只做確定要做其他事的判斷
                {
                    return LowestCommonAncestor(root.left, p, q);
                }
                else if (p.val > root.val && q.val > root.val)
                {
                    return LowestCommonAncestor(root.right, p, q);
                }
                return root;//直接把隱含的其中一個等於就中的判斷用return取代
            }
        }
        //來源
        //這個更精簡，猛
        //https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/discuss/296970/C-DFS
        //這個也一樣的作法，不過把判斷塞在一起用||切開，另一個叫度的精簡@@
        //https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/discuss/64990/C-Recursive
    }
}
