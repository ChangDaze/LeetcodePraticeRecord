using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root1 = new TreeNode(1, new TreeNode(2));
            var root2 = new TreeNode(1, null,new TreeNode(2));
            Solution solution = new Solution();
            var result = solution.LeafSimilar(root1,root2);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }


        public class Solution
        {
            int[] leaves_1;
            List<int> leaves_temp = new List<int>();
            public bool LeafSimilar(TreeNode root1, TreeNode root2)
            {
                Recurive(root1);
                leaves_1 = new int[leaves_temp.Count()];//int[] 還是null時不能copy
                leaves_temp.CopyTo(leaves_1);//直接用List<int> leaves_1 = leaves_temp 會有reference的問題，copy也只支援array才這樣做，一般如過不只兩個root要比較，可能就請他們倆倆列隊進來檢查，或是只跑單一root把List return，靈活度可能更高
                leaves_temp.Clear();
                Recurive(root2);
                if (leaves_temp.Count() != leaves_1.Count()) return false;
                
                for(int i = 0;i<leaves_1.Count(); i++)                
                    if (leaves_1[i] != leaves_temp[i])return false;
                
                return true;
            }

            public void Recurive(TreeNode node) 
            {
                if (node == null) return;//這要擺在最前，不然null被抓node.left之類的會死掉
                if (node.left == null && node.right == null) //這其實就是平常對root.val的動作，inorder
                {
                    leaves_temp.Add(node.val);
                    return;
                }                
                Recurive(node.left);
                Recurive(node.right);
                
            }
        }


    }
}
