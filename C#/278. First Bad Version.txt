using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            Solution solution = new Solution();
            int result = solution.FirstBadVersion(2126753390);

            Console.WriteLine(result);
            

            Console.ReadKey();

        }

        public class VersionControl
        {
            public bool IsBadVersion(int version)
            {
                return version >= 1702766719;//填入答案
            }
        }

        public class Solution : VersionControl
        {
            public int FirstBadVersion(int n)//n等於長度
            {
                if (IsBadVersion(1))//題目是1~n，n只要true就沒有更前面壞掉的了，可以順便檢查邊界(邊界在二元搜尋法一定最後找到)
                {
                    return 1;
                }
                else if (n == 2)//因為前面檢查過1了，所以2true就一定沒有更前面的，不過照這樣說我好像可以遞回到n@@，所以這個不用其實好像沒差
                {
                    return 2;
                }

                //true是target小於等於
                //false是target大於等於
                int max = n;//3個值方便定位，反正不差記憶體
                int min = 1;
                int now = n;
                //先檢查n(檢查邊界)
                while (true)
                {
                    if (!IsBadVersion(now - 1))//確定是遞一個壞掉的方法，前一個false，這一個true
                    {
                        if(IsBadVersion(now))
                        {
                            break;
                        }
                        else//前一個false這個也false代表target大於等於
                        {
                            min = now;//二元搜尋邊界要移動，不然不會縮小範圍
                            now = now + (max-min) / 2;//大於就是要加
                            //這裡有個重點就是要用max-min，因為題目會用接近int上限的數字
                            continue;
                        }                        
                    }
                    //前一個true代表這個必定true代表target小於等於
                    max = now;//上限縮小
                    now = now - (max-min) / 2;//小於就是要減


                    if (now == 1 || now == n-1)//最後會逼近到邊界，防止無限迴圈，不過也沒觸發過也不知道有沒有用
                        break;
                }

                return now;
            }
        }
        //其他
        //這個很簡潔，最後left=right，但比較難想像，不過是很純粹的二元搜尋，沒像我有些偷吃步
        //https://leetcode.com/problems/first-bad-version/discuss/301319/C-binary-search
        //這也差不多
        //https://leetcode.com/problems/first-bad-version/discuss/436264/Elementary-C-Solution
        //這也差不多，不過他有轉型防止計算錯誤，還有用+1，-1的方式確定交錯後下一步會出現原min = 原max +1
        //https://leetcode.com/problems/first-bad-version/discuss/117541/C-Solution
        //這樣感覺我自己想出來的方法蠻屌的只有我是用false + true判斷，可能會快一點吧畢竟不用等到左右重疊
    }
}
