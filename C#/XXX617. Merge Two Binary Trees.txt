using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root1 = new TreeNode(1, new TreeNode(3, new TreeNode(5)), new TreeNode(2));
            var root2 = new TreeNode(2, new TreeNode(1, null,new TreeNode(4)), new TreeNode(3,null, new TreeNode(7)));;
            Solution solution = new Solution();
            var result = solution.MergeTrees(root1,root2);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        public class Solution
        {
            TreeNode result = null;
            public TreeNode MergeTrees(TreeNode root1, TreeNode root2)
            {
                if (root1 == null)//因為題目會給root==null導致不能走最初的recursive
                    return root2;
                else if (root2 == null)
                    return root1;
                else
                {
                    this.result = root1;
                    Recursive(root1, root2);
                    return result;
                }                
            }

            public void Recursive(TreeNode node1,TreeNode node2)
            {                                    
                if(node2.left != null)
                {
                    if (node1.left == null)//因為指定到null會導致tree斷掉沒有reference，所以要做要先建出節點
                        node1.left = new TreeNode(0);
                    Recursive(node1.left, node2.left);
                }                    
                if (node2.right != null)
                {
                    if (node1.right == null)
                        node1.right = new TreeNode(0);
                    Recursive(node1.right, node2.right);
                }
                node1.val = node1.val + node2.val;//這是走post order，root最後做
                return;//好像recursive有return就能用??不一定要將條件放在最前面?好像是把return條件放在最前的都可以改用iterative?
            }
        }
    }
}
