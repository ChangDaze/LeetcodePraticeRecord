using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root = new TreeNode(1, new TreeNode(1));
            Solution solution = new Solution();
            var result = solution.SumRootToLeaf(root);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        public class Solution
        {
            public double result = 0;
            public int SumRootToLeaf(TreeNode root)
            {
                Recursive(root, "");
                return (int)result;
            }

            public void Recursive(TreeNode node, string bit)
            {
                if (node == null) //單一邊null的節點難免會遇到null，直接跳過不管就好
                    return;
                bit += node.val.ToString();//這是preorder組字串
                if (node.left == null && node.right == null)//因為只有leaf要加，所以單一邊null的節點不會加
                {
                    for (int i = 0; i < bit.Length; i++)
                    {
                        if (bit[i] == '1')
                            result += Math.Pow(2, (bit.Length -1- i));//因為是0~【bit.Length -1】,然後index和指數倒過來所以-i
                        //bit轉數字就是對應位置是1就加上2的幾次方，ex:11 -> 2^1+2^0=3(C#裡^不是指數)
                    }
                    return;
                }
                else
                {
                    //能繼續往下就往下，單一邊null會在開頭處理
                    Recursive(node.left, bit);
                    Recursive(node.right, bit);
                }
                return;
            }
        }
    }
}
