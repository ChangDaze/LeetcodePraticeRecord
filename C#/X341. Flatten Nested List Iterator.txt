using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            //string s = "())";
            //Solution solution = new Solution();
            //var result = solution.MinAddToMakeValid(s);
            //Console.WriteLine(result);
            //Console.ReadKey();

        }

 //       /**
 //* // This is the interface that allows for creating nested lists.
 //* // You should not implement it, or speculate about its implementation
 //* interface NestedInteger {
 //*
 //*     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 //*     bool IsInteger();
 //*
 //*     // @return the single integer that this NestedInteger holds, if it holds a single integer
 //*     // Return null if this NestedInteger holds a nested list
 //*     int GetInteger();
 //*
 //*     // @return the nested list that this NestedInteger holds, if it holds a nested list
 //*     // Return null if this NestedInteger holds a single integer
 //*     IList<NestedInteger> GetList();
 //* }
 //*/
        public class NestedIterator
        {
            private Queue<int> queue = new Queue<int>();

            public NestedIterator(IList<NestedInteger> nestedList)
            {
                foreach (var nested in nestedList)
                {
                    if (nested.IsInteger())
                    {
                        this.queue.Enqueue(nested.GetInteger());
                        continue;
                    }
                    Recursive(nested.GetList());
                }
            }

            private void Recursive(IList<NestedInteger> elements)
            {
                foreach (var element in elements)
                {
                    if (element.IsInteger())
                    {
                        this.queue.Enqueue(element.GetInteger());
                        continue;
                    }
                    Recursive(element.GetList());
                }
            }

            public bool HasNext()
            {
                return queue.Count > 0;
            }

            public int Next()
            {
                return queue.Dequeue();
            }
        }
        //敘述很重要，所以就都留著了，乾這題難的根本不是queue，而是推測他的IList<NestedInteger>，可以看看別人是如何拆解IList<NestedInteger>

        ///**
        // * Your NestedIterator will be called like this:
        // * NestedIterator i = new NestedIterator(nestedList);
        // * while (i.HasNext()) v[f()] = i.Next();
        // */

    }
}
