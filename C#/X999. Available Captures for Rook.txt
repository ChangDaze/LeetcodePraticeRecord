using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var board = new char[][] { new char[] { '.', '.', '.', '.', '.', '.', '.', '.' },
            new char[] { '.','p','p','p','p','p','.','.' },
            new char[] { '.','p','p','B','p','p','.','.' },
            new char[] { '.','p','B','R','B','p','.','.' },
            new char[] { '.','p','p','B','p','p','.','.' },
            new char[] { '.','p','p','p','p','p','.','.' },
            new char[] { '.','.','.','.','.','.','.','.' },
            new char[] { '.','.','.','.','.','.','.','.'},};
            Solution solution = new Solution();
            var result = solution.NumRookCaptures(board);
            Console.WriteLine(result);
            Console.ReadKey();

        }

        public class Solution
        {
            public int NumRookCaptures(char[][] board)
            {
                int result = 0;
                int[] Rook = null;
                for (int i = 0; i < board.Length; i++)
                    for (int j = 0; j < board[0].Length; j++)
                        if (board[i][j] == 'R')
                            Rook = new int[2] { i, j };

                for (int i = Rook[0]+1; i < 8; i++)
                    if (board[i][Rook[1]] != '.')
                    {
                        result += board[i][Rook[1]] == 'p' ? 1 : 0;
                        break;
                    }

                for (int i = Rook[0] - 1; i > -1; i--)
                    if (board[i][Rook[1]] != '.')
                    {
                        result += board[i][Rook[1]] == 'p' ? 1 : 0;
                        break;
                    }

                for (int j = Rook[1] + 1; j < 8; j++)
                    if (board[Rook[0]][j] != '.')
                    {
                        result += board[Rook[0]][j] == 'p' ? 1 : 0;
                        break;
                    }

                for (int j = Rook[1] - 1; j > -1; j--)
                    if (board[Rook[0]][j] != '.')
                    {
                        result += board[Rook[0]][j] == 'p' ? 1 : 0;
                        break;
                    }

                return result;
            }
        }
    }
}
