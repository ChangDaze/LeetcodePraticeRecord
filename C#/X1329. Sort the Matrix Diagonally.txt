using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Security.Policy;
using System.Security.Cryptography;
using System.Data.SqlTypes;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[][] mat = new int[][]{ new int[] { 3, 3, 1, 1 }, new int[] { 2, 2, 1, 2 },new int[] { 1, 1, 1, 2 } };
            int k = 2;
            Solution solution = new Solution();
            var result = solution.DiagonalSort(mat);
            Console.WriteLine(result);
            Console.ReadKey();
        }
        public class Solution
        {
            public int[][] DiagonalSort(int[][] mat)
            {                
                for(int i = 0; i < mat[0].Length; i++) //column 0 ~ column.length -1
                {
                    List<int> diagonal = new List<int>();//基本上就是把對角線的值拆出來，排序後再塞回去
                    int[] cell = new int[2] {0,i};//起始位置

                    while (cell[0]<mat.Length && cell[1] < mat[0].Length)//取出未排序值
                    {
                        diagonal.Add(mat[cell[0]][cell[1]]);
                        cell[0]++;//往下走
                        cell[1]++;
                    }
                    
                    diagonal = diagonal.OrderByDescending(x => x).ToList();//因為要從後面往前排所以用降序
                    cell[0]--;//因為前面while最後有做++，所以先減回來
                    cell[1]--;

                    foreach(int value in diagonal)//因為數量已經確定了，照著填就好
                    {
                        mat[cell[0]][cell[1]] = value;
                        cell[0]--;//回頭走
                        cell[1]--;
                    }

                }

                for (int i = 1; i < mat.Length; i++) //row 0 ~ row.length -1，因為cell[0][0]起頭已經做過了
                {
                    List<int> diagonal = new List<int>();
                    int[] cell = new int[2] { i, 0 };

                    while (cell[0] < mat.Length && cell[1] < mat[0].Length)
                    {
                        diagonal.Add(mat[cell[0]][cell[1]]);
                        cell[0]++;
                        cell[1]++;
                    }

                    diagonal = diagonal.OrderByDescending(x => x).ToList();
                    cell[0]--;
                    cell[1]--;

                    foreach (int value in diagonal)
                    {
                        mat[cell[0]][cell[1]] = value;
                        cell[0]--;
                        cell[1]--;
                    }
                }

                return mat;
            }
        }
        //速度很慢，但我覺得做出來就不錯了@@
        //這有官方解，到時候可以看看
    }
}
