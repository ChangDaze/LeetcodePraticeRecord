using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Security.Policy;
using System.Security.Cryptography;
using System.Data.SqlTypes;
using System.Reflection;
using System.Security.AccessControl;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int[][] people = new int[][] { new int[] { 7, 0 }, new int[] { 4, 4 }, new int[] { 7, 1 }, new int[] { 5, 0 }, new int[] { 6, 1 }, new int[] { 5, 2 } };
            Solution solution = new Solution();
            var result = solution.ReconstructQueue(people) ;
            Console.WriteLine(result);
            Console.ReadKey();
        }

        public class Solution
        {
            public int[][] ReconstructQueue(int[][] people)
            {
                List<int[]> copy = people.OrderBy(x => x[0]).ThenByDescending(x => x[1]).ToList();
                List<int> index = Enumerable.Range(0, people.Length).ToList();
                int[][] result = new int[people.Length][];

                for (int i = 0;i< copy.Count;i++)
                {
                    int position = index[copy[i][1]];

                    result[position] = copy[i];

                    index.RemoveAt(copy[i][1]);
                }

                return result;

            }
        }
        //https://leetcode.com/problems/queue-reconstruction-by-height/solutions/89387/java-solution-using-array-sort-and-greedy/
    }
}
