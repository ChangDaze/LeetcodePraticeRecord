using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            var root1 = new TreeNode(1, new TreeNode(2));
            var root2 = new TreeNode(1, null, new TreeNode(2));
            Solution solution = new Solution();
            var result = solution.LeafSimilar(root1, root2);
            Console.WriteLine(result);
            Console.ReadKey();

        }


        public class TreeNode
        {
            public int val;
            public TreeNode left;
            public TreeNode right;
            public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null)
            {
                this.val = val;
                this.left = left;
                this.right = right;
            }
        }

        public class Solution
        {
            public bool LeafSimilar(TreeNode root1, TreeNode root2)
            {
                var leaves1 = GetLeaves(root1);
                var leaves2 = GetLeaves(root2);

                if (leaves1.Count != leaves2.Count) return false;

                for(int i = 0;i<leaves1.Count;i++)                
                    if (leaves1[i] != leaves2[i]) return false;                

                return true;
            }

            private List<int> GetLeaves(TreeNode root)
            {
                List<int> result = new List<int>();
                Stack<TreeNode> stack = new Stack<TreeNode>();
                TreeNode currentNode = root;
                while (stack.Count > 0 || currentNode != null)
                {
                    if(currentNode !=null)//進來就檢查此點
                    {
                        stack.Push(currentNode);
                        if(currentNode.left == null && currentNode.right == null) 
                            result.Add(currentNode.val);
                        currentNode = currentNode.left;//換丟左
                    }
                    else
                    {
                        currentNode = stack.Pop();
                        currentNode = currentNode.right;//換丟右
                    }
                }


                return result;
            }
        }
        //preorder,跟下面方法差不多，只是沒用遞迴
        //乾，這個人方法明明一樣卻做得很屌，他是兩個一起做，然後兩個在過程中一片片葉子檢查，然後中途返回時，因為stack緣故所以可以保留紀錄繼續走，思考很清晰，也點出我可以少做一步 currentNode != null
        //https://leetcode.com/problems/leaf-similar-trees/solutions/152329/c-java-python-o-h-space/?envType=study-plan-v2&envId=leetcode-75
        //這位C++也很不錯，他用string+特殊符號來避免使用List<int>,然後是用recursive，很簡潔
        //https://leetcode.com/problems/leaf-similar-trees/solutions/153123/c-super-easy-0ms-short-solution-beats-100/?envType=study-plan-v2&envId=leetcode-75
        //這位是JACA，方法跟第二位差不多，有提到StringBuilder，下次試試
        //https://leetcode.com/problems/leaf-similar-trees/solutions/152358/simple-6-lines-java-stringbuilder-traverse-with-explanation/?envType=study-plan-v2&envId=leetcode-75

        //public class Solution
        //{
        //    int[] leaves_1;
        //    List<int> leaves_temp = new List<int>();
        //    public bool LeafSimilar(TreeNode root1, TreeNode root2)
        //    {
        //        Recurive(root1);
        //        leaves_1 = new int[leaves_temp.Count()];//int[] 還是null時不能copy
        //        leaves_temp.CopyTo(leaves_1);//直接用List<int> leaves_1 = leaves_temp 會有reference的問題，copy也只支援array才這樣做，一般如過不只兩個root要比較，可能就請他們倆倆列隊進來檢查，或是只跑單一root把List return，靈活度可能更高
        //        leaves_temp.Clear();
        //        Recurive(root2);
        //        if (leaves_temp.Count() != leaves_1.Count()) return false;

        //        for (int i = 0; i < leaves_1.Count(); i++)
        //            if (leaves_1[i] != leaves_temp[i]) return false;

        //        return true;
        //    }

        //    public void Recurive(TreeNode node)
        //    {
        //        if (node == null) return;//這要擺在最前，不然null被抓node.left之類的會死掉
        //        if (node.left == null && node.right == null) //這其實就是平常對root.val的動作，inorder
        //        {
        //            leaves_temp.Add(node.val);
        //            return;
        //        }
        //        Recurive(node.left);
        //        Recurive(node.right);

        //    }
        //}


    }
}
