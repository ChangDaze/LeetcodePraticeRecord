using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Data.Common;
using System.Xml.Linq;
using System.Security.Policy;
using System.Security.Cryptography;
using System.Data.SqlTypes;
using System.Reflection;
using System.Security.AccessControl;

namespace testconsole2013
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = 4;
            int[] rounds = new int[] { 1, 3, 1, 2 };
            Solution solution = new Solution();
            var result = solution.MostVisited(n,rounds);
            Console.WriteLine(result);
            Console.ReadKey();
        }

        public class Solution
        {
            public IList<int> MostVisited(int n, int[] rounds)
            {
                List<int> result = new List<int>();                

                for(int i = rounds[rounds.Length-1]; ; i--)
                {
                    if(i == 0)i = n;//通過0時從尾巴接續

                    result.Add(i);

                    if(i== rounds[0]) break;
                }

                return result.OrderBy(x=>x).ToArray();//因為逆著跑圈
            }
        }
        //雖然題目很騙小孩(基本上就是在這圈上從終點往回推到起始點，就是答案)，但這種逆著跑圈的演算法也很有趣
        //速度超慢，可以多看看別人的

        //這是100%的，就是硬組答案，就單純純粹的道理上來講，這樣好像真的會比較快?
        //public class Solution
        //{
        //    public IList<int> MostVisited(int n, int[] rounds)
        //    {
        //        if (rounds[0] == rounds[rounds.Length - 1])
        //            return new List<int>() { rounds[0] };

        //        if (rounds[0] < rounds[rounds.Length - 1])
        //            return Enumerable.Range(rounds[0], rounds[rounds.Length - 1] - rounds[0] + 1).ToList();

        //        var left = Enumerable.Range(1, rounds[rounds.Length - 1]);
        //        var right = Enumerable.Range(rounds[0], n - rounds[0] + 1);

        //        return left.Concat(right).ToArray();
        //    }
        //}
    }
}
