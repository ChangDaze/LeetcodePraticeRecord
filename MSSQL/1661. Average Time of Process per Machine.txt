Create table #Activity (machine_id int, process_id int, activity_type varchar(50), timestamp float)
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('0', '0', 'start', '0.712')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('0', '0', 'end', '1.52')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('0', '1', 'start', '3.14')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('0', '1', 'end', '4.12')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('1', '0', 'start', '0.55')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('1', '0', 'end', '1.55')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('1', '1', 'start', '0.43')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('1', '1', 'end', '1.42')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('2', '0', 'start', '4.1')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('2', '0', 'end', '4.512')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('2', '1', 'start', '2.5')
insert into #Activity (machine_id, process_id, activity_type, timestamp) values ('2', '1', 'end', '5')

select * from #Activity

select 
	machine_id,
	ROUND( sum(case when activity_type = 'start' --遇start用負，遇end用正算出中間差
		then -timestamp 
		else timestamp end) * 2 / COUNT(1),3) processing_time--因為兩兩相對所以總數要除二
from #Activity
group by machine_id

--這是下面第一位的寫法
SELECT s.machine_id, ROUND(AVG(e.timestamp-s.timestamp), 3) AS processing_time
FROM #Activity s JOIN #Activity e ON
    s.machine_id = e.machine_id AND s.process_id = e.process_id AND
    s.activity_type = 'start' AND e.activity_type = 'end'
GROUP BY s.machine_id

--速度不快，速度慢好像有可能是因為mysql和mssql一起比ㄟ，不知道
--其他
--這位是用兩倍的join出start對同編號end的table(table1原本的end就沒出現了)，算是join and 進階用法，不過我跑，速度更慢
--https://leetcode.com/problems/average-time-of-process-per-machine/solutions/941770/mysql-self-join-100-faster-100-less-memory/
--這方法跟我一樣，裡面還有用if的
--https://leetcode.com/problems/average-time-of-process-per-machine/solutions/1513091/runtime-577-ms-faster-than-99-18-of-ms-sql-server/
--這方法一樣，不過他有說明到可以用count(distinct)取代count()/2，不過這樣應該不能用count(1)，所以差異應不大
--https://leetcode.com/problems/average-time-of-process-per-machine/solutions/1084239/simple-solution-without-join/

drop table #Activity